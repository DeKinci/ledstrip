<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>LED</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@3.9.2/dist/full.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.3.5/dist/alpine.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js" crossorigin="anonymous"></script>
</head>

<body class="flex flex-col items-center mt-4 font-sans text-base">
    <div x-data="shaders()" x-init="initialize()" class="w-full max-w-xl p-4 card bg-base-100 shadow-lg">
        <h1 class="text-xl font-bold mb-4">Select mode</h1>

        <ul class="flex flex-col gap-2 mb-4">
            <template x-for="shader in shaders" :key="shader.name">
                <li :class="{'bg-base-200': shader.selected}"
                    class="p-3 rounded border border-base-300 flex justify-between items-center hover:shadow transition cursor-pointer">
                    <div class="flex items-center gap-2">
                        <span x-text="shader.selected ? '✔' : '◻'"></span>
                        <span @click="selectShader(shader)" x-text="shader.name" class="font-semibold"></span>
                    </div>
                    <div class="flex gap-2">
                        <button @click="editShader(shader.name)" class="btn btn-xs btn-warning">Edit</button>
                        <button @click="deleteShader(shader.name)" class="btn btn-xs btn-error">Delete</button>
                    </div>
                </li>
            </template>
        </ul>

        <div class="form-control mb-4">
            <div class="input-group">
                <input type="text" x-model="inputValue" placeholder="NewShader" class="input input-bordered w-full" />
                <button @click="addShader()" class="btn btn-primary">Upload</button>
            </div>
        </div>

        <div>
            <div id="editor" :class="{'hidden': !inputValue}" class="h-[400px] w-full text-sm border rounded">-- example function of hsv rainbow
function draw(led_count)
    for i = 0, led_count - 1 do
        hsv(i, env.millis / 10 + i * 5, 255, 255)
    end
end
            </div>
        </div>
    </div>

    <script>
        var serverIp = "%SELF_IP%";
        if (serverIp.includes("SELF_IP")) serverIp = "led.local";
        var gateway = `ws://${serverIp}/control`;

        var editor = ace.edit("editor");
        editor.setTheme("ace/theme/monokai");
        editor.session.setMode("ace/mode/lua");

        function shaders() {
            return {
                shaders: [],
                currentShader: null,
                inputValue: "",
                websocket: null,
                selectShader(s) {
                    if (s === this.currentShader) return;
                    this.websocket.send(`select ${s.name}`);
                },
                updateSelectedByName(name) {
                    const shader = this.shaders.find(s => s.name === name);
                    if (this.currentShader) this.currentShader.selected = false;
                    this.currentShader = shader;
                    if (shader) shader.selected = true;
                },
                addShader() {
                    if (!this.inputValue) return;
                    const data = { name: this.inputValue, shader: editor.getValue() };
                    fetch(`http://${serverIp}/api/shader`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data),
                    }).then(() => (this.inputValue = ""));
                },
                deleteShader(id) {
                    fetch(`http://${serverIp}/api/shader/${id}`, { method: "DELETE" });
                },
                initWebSocket() {
                    this.websocket = new WebSocket(gateway);
                    this.websocket.onopen = () => console.log("Connection opened");
                    this.websocket.onclose = () => {
                        console.log("Connection closed");
                        setTimeout(this.initWebSocket, 2000);
                    };
                    this.websocket.onmessage = this.handleMessage.bind(this);
                },
                handleMessage(event) {
                    const cmd = event.data;
                    if (cmd.startsWith("select ")) this.updateSelectedByName(cmd.substring(7));
                    if (cmd.startsWith("add ")) {
                        const name = cmd.substring(4);
                        if (!this.shaders.find(s => s.name === name)) this.shaders.push({ name, selected: false });
                    }
                    if (cmd.startsWith("delete ")) {
                        const name = cmd.substring(7);
                        this.shaders = this.shaders.filter(s => s.name !== name);
                    }
                },
                initialize() {
                    this.initWebSocket();
                    fetch(`http://${serverIp}/api/shader`)
                        .then(r => r.json())
                        .then(data => {
                            this.shaders = data.shader.map(name => ({ name, selected: false }));
                            fetch(`http://${serverIp}/api/show`)
                                .then(r => r.json())
                                .then(data => this.updateSelectedByName(data.name));
                        });
                },
                editShader(name) {
                    fetch(`http://${serverIp}/api/shader/${name}`)
                        .then(r => r.json())
                        .then(data => {
                            this.inputValue = name;
                            editor.setValue(data.shader || "");
                        });
                },
            };
        }
    </script>
</body>
</html>
